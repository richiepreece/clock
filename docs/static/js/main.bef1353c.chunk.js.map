{"version":3,"sources":["serviceWorker.js","app/Tunnel.js","app/Orb.js","app/time/Time.js","app/Orbs.js","app/Bar.js","app/Bars.js","app/Clock.js","index.js"],"names":["Boolean","window","location","hostname","match","props","THREE","load","rotation","Math","PI","mesh","useRef","ref","this","millisecondsPerSecond","millisecondsPerMinute","moment","milliseconds","seconds","millisecondsThisSecond","minutes","millisecondsThisMinute","hour","useFrame","baseHourRotation","Time","zeroBasedHour","currHourProgressRotation","millisecondsPerHour","millisecondsThisHour","current","y","degToRad","attach","args","color","roughness","metalness","reflectivity","transparent","opacity","refractionRatio","clearcoat","transmission","Orb","position","Bar","useState","currHeight","setCurrHeight","mesh2","degreesPerMillisecondPerMinute","rotate","time","missingHeight","hourBaseRotate","oclock","BarsContainer","rotateDegrees","map","key","z","Tunnel","Orbs","Bars","ReactDOM","render","Clock","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bef1353c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useRef} from 'react';\nimport {useFrame} from 'react-three-fiber';\nimport * as THREE from 'three';\n\nexport default props => {\n  var WaterTexture = new THREE.TextureLoader().load( \"textures/water.jpg\" );\n\n  return (\n    <mesh\n      {...props}\n      rotation={[Math.PI / 2, 0, 0]}\n    >\n      {/* TODO */}\n    </mesh>\n  )\n}","import React, { useRef } from 'react';\n\nexport default (props) => {\n  const mesh = useRef();\n\n  return (\n    <mesh\n    {...props}\n    ref={mesh}\n  >\n    {/* TODO */}\n  </mesh>);\n}","import moment from 'moment';\n\nclass Time {\n  get millisecondsPerSecond() {\n    return 1000;\n  }\n\n  get millisecondsPerMinute() {\n    return this.millisecondsPerSecond * 60;\n  }\n\n  get millisecondsPerHour() {\n    return this.millisecondsPerMinute * 60;\n  }\n\n  get millisecondsThisSecond() {\n    return moment().milliseconds();\n  }\n\n  get millisecondsThisMinute() {\n    return moment().seconds() * 1000 + this.millisecondsThisSecond;\n  }\n\n  get millisecondsThisHour() {\n    return moment().minutes() * 60 * 1000 + this.millisecondsThisMinute;\n  }\n\n  get zeroBasedHour() {\n    return moment().hour() % 12;\n  }\n}\n\nexport default new Time();","import React, { useRef } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport Orb from './Orb';\n\nimport Time from './time/Time';\n\nexport default (props) => {\n  const mesh = useRef();\n\n  useFrame(() => {\n    // Spinning orb pattern will repeat, just spun by 30 degrees every hour\n    const baseHourRotation = 30 * Time.zeroBasedHour;\n    const currHourProgressRotation = (30 / Time.millisecondsPerHour) * Time.millisecondsThisHour;\n    mesh.current.rotation.y = THREE.MathUtils.degToRad(baseHourRotation + currHourProgressRotation);\n  })\n\n  return (\n    <mesh\n    {...props}\n    ref={mesh}\n    rotation={[-Math.PI / 2, 0, 0]}\n  >\n    {/* Placeholder to show progress through hour */}\n    <cylinderBufferGeometry attach=\"geometry\" args={[.5, .5, .01, 3]} />\n    <meshPhysicalMaterial\n        attach=\"material\"\n        color={new THREE.Color('#1e4985')}\n        roughness={0.1}\n        metalness={0.0}\n        reflectivity={1.0}\n        transparent\n        opacity={0.5}\n        refractionRatio={0.9}\n        clearcoat\n        transmission={0.4} />\n\n    <Orb position={[0, 0, 0]} />\n  </mesh>);\n}","import React, { useRef, useState } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\n\nimport Time from './time/Time';\n\nfunction Bar (props) {\n  const [currHeight, setCurrHeight] = useState(1.5);\n\n  const mesh = useRef()\n  const mesh2 = useRef()\n\n  // Bars should rotate once very 15 seconds\n  const degreesPerMillisecondPerMinute = (360 / Time.millisecondsPerMinute) * 4;\n  const height = 1.5;\n\n  useFrame(() => {\n    const rotate = (degreesPerMillisecondPerMinute * Time.millisecondsThisMinute) % 360;\n    mesh.current.rotation.y = THREE.MathUtils.degToRad(rotate);\n\n    if(props.time) {\n      //Crystal should slowly drain over an hour\n      mesh2.current.rotation.y = THREE.MathUtils.degToRad(rotate);\n      const missingHeight = (height - 0.02) * (Time.millisecondsThisHour / Time.millisecondsPerHour);\n\n      const intendedHeight = height - missingHeight - 0.02;\n      if(currHeight < intendedHeight) {\n        // If crystal should be more full than it is, fill it up with each frame\n        setCurrHeight(currHeight + 0.01);\n      } else {\n        setCurrHeight(height - missingHeight - 0.02);\n      }\n    }\n  });\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n      position={[0, 2, 0]}\n    >\n      <cylinderBufferGeometry attach=\"geometry\" args={[0.15, 0.15, 1.5, 6]} />\n      <meshPhysicalMaterial\n        attach=\"material\"\n        color={props.time ? new THREE.Color('#6096ff') : new THREE.Color('#1e4985')}\n        roughness={0.1}\n        metalness={0.0}\n        reflectivity={1.0}\n        transparent\n        opacity={0.5}\n        refractionRatio={0.9}\n        clearcoat\n        transmission={0.4} />\n    </mesh>\n    {props.time &&\n      <mesh\n        {...props}\n        position={[0, 2 + ((currHeight - 1.5) / 2) + 0.01, 0]}\n        ref={mesh2}\n      >\n        <cylinderBufferGeometry attach=\"geometry\" args={[0.149, 0.149, currHeight, 6]} />\n        <meshPhongMaterial attach=\"material\" color={new THREE.Color('#94f4fe')} />\n      </mesh>\n    }\n    </>\n  )\n}\n\nexport default (props) => {\n  const hourBaseRotate = 30 * -props.oclock;\n\n  return (\n    // Start each mesh off rotated 30 degrees from center to give all\n    // 12 hours a new y-axis direction for easier rotation\n    <mesh\n      {...props}\n      rotation={[0, 0, THREE.MathUtils.degToRad(hourBaseRotate)]}\n    >\n      <Bar {...props} />\n    </mesh>\n  )\n}","import React, { useRef } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\n\nimport Bar from './Bar';\nimport Time from './time/Time';\n\nfunction BarsContainer(props) {\n  const mesh = useRef();\n  const hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  const degreesPerMillisecondPerMinute = 360 / Time.millisecondsPerMinute;\n\n  useFrame(() => {\n    // We want the entire clock to rotate round its axis once per minute.\n    // This will rotates the correct number of degrees for the number of\n    // milliseconds so far this hour\n    const rotateDegrees = degreesPerMillisecondPerMinute * -Time.millisecondsThisMinute;\n    mesh.current.rotation.y = THREE.MathUtils.degToRad(rotateDegrees);\n  });\n\n  return (\n    <mesh\n    {...props}\n    ref={mesh}\n  >\n    {/* One crystal per hour. Only hour 0 keeps track of time */}\n    {hours.map(hour => <Bar key={hour} oclock={hour} time={hour === 0} />)}\n  </mesh>);\n}\n\nexport default props => {\n  const mesh = useRef();\n\n  useFrame(() => {\n    // Rotate the clock 30 degrees per hour to point the timekeeping\n    // crystal towards the current hour\n    const hourBaseRotate = 30 * -Time.zeroBasedHour;\n    mesh.current.rotation.z = THREE.MathUtils.degToRad(hourBaseRotate);\n  });\n\n  return (\n    <mesh\n    {...props}\n    ref={mesh}\n  >\n    <BarsContainer />\n  </mesh>);\n}","import React from 'react';\n\nimport Tunnel from './Tunnel';\nimport Orbs from './Orbs';\nimport Bars from './Bars';\n\nexport default (props) => {\n  return (\n    <mesh\n    {...props}\n  >\n    <Tunnel />\n    <Orbs />\n    <Bars />\n  </mesh>);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas } from 'react-three-fiber';\nimport * as serviceWorker from './serviceWorker';\n\nimport Clock from './app/Clock';\n\nimport './index.scss';\n\nReactDOM.render(\n  <Canvas>\n    <ambientLight />\n    <pointLight position={[-7, 0, 7]} />\n\n    <Clock />\n  </Canvas>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}