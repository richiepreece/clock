{"version":3,"sources":["serviceWorker.js","app/Bar.js","app/Bars.js","app/Clock.js","index.js"],"names":["Boolean","window","location","hostname","match","BarContainer","props","useState","currHour","setCurrHour","currHeight","setCurrHeight","mesh","useRef","mesh2","useFrame","rotate","degrees","moment","seconds","milliseconds","current","rotation","y","THREE","degToRad","millisecondsThisHour","minutes","hour","oclock","ref","attach","args","color","roughness","metalness","reflectivity","transparent","opacity","hourBaseRotate","full","Bar","position","Bars","ReactDOM","render","Clock","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2b4712d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useRef, useState } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport moment from 'moment';\n\nfunction BarContainer (props) {\n  const [currHour, setCurrHour] = useState(false);\n  const [currHeight, setCurrHeight] = useState(1.5);\n\n  const mesh = useRef()\n  const mesh2 = useRef()\n\n  const degrees = 360;\n  const millisecondsPerMinute = 60 * 1000;\n  const millisecondsPerHour = 60 * 60 * 1000;\n  const degreesPerMillisecondPerMinute = (degrees / millisecondsPerMinute) * 4;\n\n  const height = 1.5;\n\n  useFrame(() => {\n    let millisecondsThisMinute = moment().seconds() * 1000 + moment().milliseconds();\n    let rotate = (degreesPerMillisecondPerMinute * millisecondsThisMinute) % 360;\n\n    mesh.current.rotation.y = THREE.MathUtils.degToRad(rotate);\n    if(mesh2.current) {\n      mesh2.current.rotation.y = THREE.MathUtils.degToRad(rotate);\n      let millisecondsThisHour = (moment().minutes() * 60 * 1000 + moment().seconds() * 1000 + moment().milliseconds());\n      let missingHeight = height * (millisecondsThisHour / millisecondsPerHour);\n      setCurrHeight(height - missingHeight);\n    }\n\n    if((!currHour && (moment().hour() % 12) === props.oclock) || (currHour && (moment().hour() % 12) !== props.oclock)) {\n      setCurrHour((moment().hour() % 12) === props.oclock);\n    }\n  });\n\n  return (\n    <>\n    <mesh\n      {...props}\n      ref={mesh}\n    >\n      <cylinderBufferGeometry attach=\"geometry\" args={[0.15, 0.15, 1.5, 6]} />\n      <meshPhongMaterial attach=\"material\" color={new THREE.Color('#1e4985')} roughness={0.1} metalness={0.0} reflectivity={1.0} transparent opacity={0.5} />\n    </mesh>\n    {currHour &&\n    <mesh\n      {...props}\n      ref={mesh2}\n    >\n      <cylinderBufferGeometry attach=\"geometry\" args={[0.16, 0.16, currHeight, 6]} />\n      <meshPhongMaterial attach=\"material\" color={'white'} roughness={0.1} metalness={0.0} reflectivity={1.0} transparent opacity={0.5} />\n    </mesh>\n    }\n    </>\n  )\n}\n\nexport default (props) => {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  const hourBaseRotate = 360 / 12 * -props.oclock;\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      rotation={[0, 0, THREE.MathUtils.degToRad(hourBaseRotate)]}\n    >\n      <BarContainer full={props.full} oclock={props.oclock} />\n    </mesh>\n  )\n}","import React, { useRef } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport moment from 'moment';\n\nimport Bar from './Bar';\n\nexport default (props) => {\n  const mesh = useRef();\n\n  const degrees = 360;\n  const millisecondsPerMinute = 60 * 1000;\n  const degreesPerMillisecondPerMinute = degrees / millisecondsPerMinute;\n\n  useFrame(() => {\n    let millisecondsThisMinute = moment().seconds() * 1000 + moment().milliseconds();\n    let degrees = degreesPerMillisecondPerMinute * -millisecondsThisMinute;\n\n    mesh.current.rotation.y = THREE.MathUtils.degToRad(degrees);\n  })\n\n  return (\n    <mesh\n    {...props}\n    ref={mesh}\n  >\n    <circleBufferGeometry attach=\"geometry\" args={[3.5, 100]} />\n    <meshPhongMaterial attach=\"material\" color={new THREE.Color('#1e4985')} roughness={0.1} metalness={0.0} reflectivity={1.0} transparent opacity={0.5} />\n\n    <Bar position={[1, 2, 0]} oclock={1} />\n    <Bar position={[2, 1, 0]} oclock={2} />\n    <Bar position={[2, 0, 0]} oclock={3} />\n    <Bar position={[2, -1, 0]} oclock={4} />\n    <Bar position={[1, -2, 0]} oclock={5} />\n    <Bar position={[0, -2, 0]} oclock={6} />\n    <Bar position={[-1, -2, 0]} oclock={7} />\n    <Bar position={[-2, -1, 0]} oclock={8} />\n    <Bar position={[-2, 0, 0]} oclock={9} />\n    <Bar position={[-2, 1, 0]} oclock={10} />\n    <Bar position={[-1, 2, 0]} oclock={11} />\n    <Bar position={[0, 2, 0]} oclock={0} />\n  </mesh>);\n}","import React, { useRef } from 'react';\nimport * as THREE from 'three';\n\nimport Bars from './Bars';\n\nexport default (props) => {\n  const mesh = useRef();\n\n  return (\n    <mesh\n    {...props}\n    ref={mesh}\n  >\n    <circleBufferGeometry attach=\"geometry\" args={[3.5, 100]} />\n    <meshPhongMaterial attach=\"material\" color={new THREE.Color('#1e4985')} roughness={0.1} metalness={0.0} reflectivity={1.0} transparent opacity={0.5} />\n\n    <Bars position={[0, 0, 0]} />\n  </mesh>);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas } from 'react-three-fiber';\nimport * as serviceWorker from './serviceWorker';\n\nimport Clock from './app/Clock';\n\nimport './index.scss';\n\nReactDOM.render(\n  <Canvas>\n    <ambientLight />\n    <pointLight position={[-10, 0, 10]} />\n\n    <Clock position={[0, 0, 0]} />\n  </Canvas>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}